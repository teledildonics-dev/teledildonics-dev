{"version":3,"sources":["components/bluetooth-logo.tsx","components/bluetooth-selector.tsx","common/safety.ts","lovense/models.ts","common/utf8.ts","common/events.ts","common/async.ts","lovense/lovense.ts","hooks/throttle.ts","components/patterns.tsx","lovense/patterns.tsx","components/lovense-control.tsx","hooks/lovense.ts","hooks/lovense-debug.tsx","components/devices.tsx","common/disposable.ts","reconcilliation/lovense-fake.ts","reconcilliation/lovense-abstract.ts","reconcilliation/lovense-device.ts","reconcilliation/lovense-selector.tsx","index.tsx","pages/lovense-devices.tsx","reconcilliation/scrap.tsx","reconcilliation/use-lovense.ts"],"names":["BluetoothLogo","width","height","viewBox","role","aria-label","ry","fill","d","stroke","strokeWidth","buttonStyles","display","alignItems","justifyContent","boxSizing","border","color","background","fontSize","fontFamily","padding","cursor","borderRadius","verticalAlign","position","overflow","BluetoothSelector","onChange","options","acceptAllDevices","style","useState","device","setDevice","requested","setRequested","fontWeight","left","top","bottom","textAlign","borderRight","onClick","undefined","target","value","right","name","disabled","a","request","navigator","bluetooth","requestDevice","console","error","assert","condition","message","Error","Model","unwrap","first","values","only","length","Lock","tail","Promise","resolve","destruction","callback","result","this","then","catch","utf8Encoder","Object","freeze","TextEncoder","utf8Decoder","TextDecoder","utf8","encode","s","decode","b","withEventStream","eventName","eventMapper","handler","stream","ReadableStream","start","controller","addEventListener","listener","event","enqueue","cancel","removeEventListener","reader","getReader","releaseLock","sleep","ms","setTimeout","addTimeout","timeout","TimeoutError","race","reject","Resolver","promise","resolve_","reject_","settled_","_value","_error","onfulfilled","onrejected","Nora","Max","Lush","Hush","Domi","Edge","Osci","modelCapabilities","Map","vibration","rotation","patterns","levels","modelsById","Lovense","lock","destroyed","connected","connectionCount","server","service","characteristics","transmitter","receiver","callTimeout","eventTarget","document","createElement","cachedInfo","gatt","id","deviceName","slice","padStart","type","info","logPrefix","connect","onMessage","DataView","binary","onDisconnected","dispatchEvent","Event","getPrimaryServices","getCharacteristics","filter","c","properties","write","startNotifications","disconnect","f","warn","use","connectAndRetry","responses","writeValue","call","read","split","firmware","serial","model","get","capabilities","Number","body","level","isSafeInteger","power","Math","round","command","abs","index","powers","test","tag","part","partIndex","partCount","push","map","digit","response","indices","getPattern","vibrate","rotate","deviceProfile","filters","namePrefix","optionalServices","flat","useThrottledChanges","interval","throttled","useRef","throttledValue","setThrottledValue","targetValue","useEffect","current","checkAsync","initialValue","latestTargetValue","PatternsControl","lovense","pattern","key","toString","margin","wordWrap","startPattern","opacity","PatternDisplay","x","y","xOffset","max","outerWidth","log","canvas","g2d","getContext","lineJoin","beginPath","strokeStyle","lineWidth","dy","moveTo","lineTo","dx","outerHeight","arc","PI","url","toDataURL","alt","src","clamp","min","sinny","period","magnitude","sin","compress","blend","sum","numbers","n","thor","xAccelerating","pow","baseline","longStrongRamp","initialClamp","DeviceControl","targetVibrationLevel","setTargetVibrationLevel","targetVibrationPower","throttledTargetVibrationPower","targetRotationLevel","setTargetRotationLevel","targetRotationPower","throttledTargetRotationPower","setInfo","batch","setBatch","battery","setBattery","setPatterns","onConnect","onDisconnect","setState","stop","destroy","useLovense","useCallback","window","useLovenseDebug","batteryPollInterval","setInterval","clearInterval","patternEnabled","setPatternEnabled","t","setT","startTime","Date","now","intervalId","minHeight","flexDirection","marginBottom","lineHeight","floor","whiteSpace","transform","borderTopLeftRadius","DevicePanes","AsyncDisposable","disposeStarter","diposeStarted","readonly","disposeCompleter","diposeCompleted","disposal","settled","DisposedError","throwIfDisposeStarted","onDispose","instance","LovenseFake","performance","info_","setVibration_","canRotate","setRotation_","all","LovenseDevice","LovenseSelector","setLovense","abortion","AbortController","signal","aborted","abort","description","JSON","stringify","_event","routes","float","href","controls","lovenseInternal","setCanRotate","canVibrate","defaultValue","setVibration","setRotation","Index","listStyleType","entries","path","marginTop","marginLeft","ReactDOM","render","location","pathname","Route","Page","title","getElementById"],"mappings":"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","file":"static/js/main.7a417395.chunk.js","sourcesContent":["import { FC } from \"react\";\nimport React from \"react\";\n\nexport const BluetoothLogo: FC<{ width?: number; height?: number }> = ({\n  width = 16,\n  height\n}) => {\n  return (\n    <svg\n      viewBox=\"0 0 640 976\"\n      width={width}\n      height={height}\n      role=\"img\"\n      aria-label=\"Bluetooth\"\n    >\n      <rect ry=\"291\" height=\"976\" width=\"640\" fill=\"#0a3d91\" />\n      <path\n        d=\"m157,330,305,307-147,178v-636l147,170-305,299\"\n        stroke=\"#FFF\"\n        strokeWidth=\"53\"\n        fill=\"none\"\n      />\n    </svg>\n  );\n};\n","import React, { useState, FC, CSSProperties } from \"react\";\nimport { BluetoothLogo } from \"./bluetooth-logo\";\n\nexport const buttonStyles: CSSProperties = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  boxSizing: \"border-box\",\n  border: \"1px solid black\",\n  color: \"#000\",\n  background: \"#DDE\",\n  height: \"40px\",\n  width: \"150px\",\n  fontSize: \"14px\",\n  fontFamily: \"sans-serif\",\n  padding: \"4px\",\n  cursor: \"default\",\n  borderRadius: \"4px\",\n  verticalAlign: \"top\",\n  position: \"relative\",\n  overflow: \"hidden\"\n};\n\nexport const BluetoothSelector: FC<{\n  onChange: (event: { target: { value: BluetoothDevice | undefined } }) => void;\n  options: RequestDeviceOptions;\n  style?: CSSProperties;\n}> = ({ onChange, options = { acceptAllDevices: true }, style = {} }) => {\n  const [device, setDevice] = useState<BluetoothDevice>();\n  const [requested, setRequested] = useState(false);\n\n  if (!requested) {\n    return (\n      <button\n        style={{ ...buttonStyles, cursor: \"pointer\", ...style }}\n        onClick={async () => {\n          const request = navigator.bluetooth.requestDevice(options);\n          setRequested(true);\n\n          try {\n            const device = await request;\n            setDevice(device);\n            onChange({ target: { value: device } });\n          } catch (error) {\n            console.error(error);\n            setRequested(false);\n          }\n        }}\n      >\n        <BluetoothLogo /> &nbsp; Select Device\n      </button>\n    );\n  } else if (!device) {\n    return (\n      <button\n        disabled={true}\n        style={{ ...buttonStyles, background: \"#AAB\", color: \"#444\", ...style }}\n      >\n        <BluetoothLogo /> &nbsp; Selecting...\n      </button>\n    );\n  } else {\n    return (\n      <span style={{ ...buttonStyles, background: \"#BDC\", ...style }}>\n        <span\n          style={{\n            background: \"#DBB\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            cursor: \"pointer\",\n            fontWeight: \"bold\",\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            bottom: 0,\n            width: \"32px\",\n            textAlign: \"center\",\n            borderRight: \"1px solid black\",\n            fontSize: \"2em\"\n          }}\n          onClick={() => {\n            setDevice(undefined);\n            setRequested(false);\n            onChange({ target: { value: undefined } });\n          }}\n        >\n          ×\n        </span>\n\n        <span\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            position: \"absolute\",\n            right: 0,\n            top: 0,\n            bottom: 0,\n            left: \"32px\",\n            textAlign: \"center\"\n          }}\n        >\n          <BluetoothLogo /> &nbsp; {device.name}\n        </span>\n      </span>\n    );\n  }\n};\n\nexport default BluetoothSelector;\n","/// Some utility functions to help manage types safely.\n\n/// Ensures a condition is truthy, or throws.\nexport function assert(condition: unknown, message: string = \"assertion failed\") {\n  // TODO: use `: asserts condition` above once babel/whatever can support it\n\n  if (condition === false || condition === null || condition === undefined) {\n    throw new Error(message);\n  }\n\n  return true;\n}\n\n/// Ensures a value is not undefined and return it, or throws.\nexport const unwrap = <T>(\n  value: T | undefined,\n  message: string = \"unwrapped void value\"\n): T => {\n  if (value === undefined) {\n    throw new Error(message);\n  }\n  return value;\n};\n\n/// Returns the first item from an array or undefined.\nexport const first = <T>(values: Array<T>): T | undefined => {\n  return values[0];\n};\n\n/// Returns the only item in an array, or throws if are zero or more than one items.\nexport const only = <T>(values: Array<T>): T => {\n  assert(values.length === 1, \"expected array to only have one value\");\n  return values[0];\n};\n\n/// Throws an Error if one is provided.\nexport const throwIf = (error: Error | null) => {\n  // TODO: use `: asserts error is null` above once babel/whatever can support it\n  if (error) {\n    throw error;\n  }\n};\n\n/// Make it clearer.\nexport type unsafe = any;\n\n/// A very basic async lock using a queue. Not premptible.\nexport class Lock implements AsyncDestroy {\n  private tail: Promise<unknown> = Promise.resolve();\n  private destruction: Promise<Error> | null = null;\n\n  async use<T>(callback: () => Promise<T>): Promise<T> {\n    const result = this.tail.then(() => callback());\n    // We don't want exceptions to poison the lock.\n    this.tail = this.tail.then(() => result.catch(() => {}));\n    return result;\n  }\n\n  /// Poisons the lock. If the lock is currently held, this will wait until\n  /// it's released, but will prempt any other uses that are pending.\n  async destroy(): Promise<Error> {\n    if (!this.destruction) {\n      this.destruction = new Promise(async resolve => {\n        try {\n          await this.tail;\n        } catch (error) {\n          return resolve(error);\n        }\n        return resolve(new Error(\"Lock destroyed\"));\n      });\n    }\n\n    return this.destruction;\n  }\n}\n\nexport interface AsyncDestroy {\n  destroy(error?: Error): Promise<Error>;\n}\n\nexport const freeze = Object.freeze;\n\nexport const unreachable = () => {\n  throw new UnreachableError('this \"can\\'t\" happen');\n};\nexport class UnreachableError extends Error {}\n","export enum Model {\n  Nora = \"Nora\",\n  Max = \"Max\",\n  Lush = \"Lush\",\n  Hush = \"Hush\",\n  Domi = \"Domi\",\n  Edge = \"Edge\",\n  Osci = \"Osci\"\n}\n\nexport const Nora = Model.Nora;\nexport const Max = Model.Max;\nexport const Lush = Model.Lush;\nexport const Hush = Model.Hush;\nexport const Domi = Model.Domi;\nexport const Edge = Model.Edge;\nexport const Osci = Model.Osci;\n\n/// The capabilities of a given Lovense device.\nexport type DeviceCapabilities = {\n  /// Whether this device supports the Vibrate:# command.\n  readonly vibration?: undefined | true;\n  /// Whether this device supports the Rotate:# and RotateChange commands.\n  readonly rotation?: undefined | true;\n  /// Whether this device supports the GetLevel and SetLevel:#:# commands.\n  /// If defined, this will indicate the maximum supported index for SetLevel:#:#.\n  readonly levels?: undefined | 3;\n  /// Whether this device supports the GetPatten, GetPatten:#, and Preset:# commands.\n  /// If defined, this will indicate the maximum supported index for Preset:#.\n  readonly patterns?: undefined | 4 | 10;\n};\n\n/// The capabilities we expect from each model.\n///\n/// This assumes all generations and firmware versions of a model have the\n/// same capabilities, which probably isn't always true.\nexport const modelCapabilities = new Map<Model, DeviceCapabilities>([\n  [\n    Nora,\n    {\n      vibration: true,\n      rotation: true\n    }\n  ],\n  [\n    Lush,\n    {\n      vibration: true,\n      patterns: 4\n    }\n  ],\n  [\n    Hush,\n    {\n      vibration: true\n    }\n  ],\n  [\n    Domi,\n    {\n      vibration: true,\n      levels: 3,\n      patterns: 10\n    }\n  ]\n]);\n\n/// Maps model identifiers used in DeviceType responses to Models.\nexport const modelsById = new Map<string, Model>([\n  [\"A\", Nora],\n  [\"C\", Nora],\n  [\"B\", Max],\n  [\"S\", Lush],\n  [\"Z\", Hush],\n  [\"W\", Domi],\n  [\"P\", Edge],\n  [\"O\", Osci]\n]);\n","const utf8Encoder = new TextEncoder();\nconst utf8Decoder = new TextDecoder();\n\nconst utf8 = {\n  encode(s: string): Uint8Array {\n    return utf8Encoder.encode(s);\n  },\n  decode(b: DataView): string {\n    return utf8Decoder.decode(b);\n  }\n};\n\nexport default utf8;\n","/// Runs a handler function with an ReadableStream that will yield all\n/// events of the specified type that occur while the handler function\n/// is running.\nexport const withEventStream = async <EventValue, Result>(\n  target: EventTarget,\n  eventName: string,\n  eventMapper: (event: Event) => EventValue,\n  handler: (responses: ReadableStreamReader<EventValue>) => Result\n): Promise<Result> => {\n  let listener: undefined | ((event: Event) => void);\n\n  const stream = new ReadableStream({\n    start(controller) {\n      target.addEventListener(\n        eventName,\n        (listener = (event: Event) => {\n          controller.enqueue(eventMapper(event));\n        })\n      );\n    },\n\n    cancel() {\n      target.removeEventListener(eventName, listener!);\n    }\n  });\n\n  const reader = stream.getReader();\n  try {\n    return await handler(reader);\n  } finally {\n    reader.releaseLock();\n    stream.cancel();\n  }\n};\n","import { unsafe } from \"./safety\";\n\nexport const sleep = async (ms: number) => {\n  await new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport const addTimeout = async <T>(\n  value: Promise<T>,\n  timeout: number,\n  error: Error = new TimeoutError(`Timed out (${timeout} ms)`)\n) => {\n  return Promise.race([value, sleep(timeout).then(() => Promise.reject(error))]);\n};\n\nexport class TimeoutError extends Error {}\n\n/// A Promise with its resolve() and reject() callbacks made public and\n/// its status (but not value) synchronously available as .settled.\n///\n/// If no type is specified this defaults to void for use as a signal.\nexport class Resolver<T = void> implements PromiseLike<T> {\n  constructor(\n    public readonly promise: Promise<T> = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n    })\n  ) {\n    this.then(\n      _value => {\n        this.settled_ = \"resolved\";\n      },\n      _error => {\n        this.settled_ = \"rejected\";\n      }\n    );\n  }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    return this.promise.then(onfulfilled, onrejected);\n  }\n\n  private settled_: false | \"resolved\" | \"rejected\" = false;\n  public get settled() {\n    return this.settled_;\n  }\n\n  private resolve_: (value: T) => unknown = undefined as unsafe;\n  public get resolve() {\n    return this.resolve_;\n  }\n\n  private reject_: (value: Error) => unknown = undefined as unsafe;\n  public get reject() {\n    return this.reject_;\n  }\n\n  /// Type-only transformation limiting to read-only interfaces.\n  public readonly(): ReadonlyResolver<T> {\n    return this;\n  }\n}\n\nexport type ReadonlyResolver<T = void> = Resolver<T> &\n  (\n    | Promise<T>\n    | {\n        readonly settled: any;\n        readonly promise: any;\n      });\n","/// Allows Lovense devices to be controlled with WebBluetooth.\n///\n/// See protocol documentation at\n/// https://stpihkal.docs.buttplug.io/hardware/lovense.html.\n\nimport { assert, first, unwrap, only, unsafe, Lock, AsyncDestroy } from \"../common/safety\";\nimport utf8 from \"../common/utf8\";\nimport { withEventStream } from \"../common/events\";\nimport { addTimeout, sleep } from \"../common/async\";\nimport { Model, modelsById, modelCapabilities, DeviceCapabilities } from \"./models\";\n\ntype EventType = \"connect\" | \"disconnect\";\n\nexport default class Lovense implements AsyncDestroy {\n  // TODO: this generic opaque lock might not be a useful abstraction here\n  // we might want a request queue that's visible to this class\n  /// A lock used to serialize all Bluetooth calls, since the protocol isn't concurrency-safe.\n  private lock: Lock = new Lock();\n  /// Returns an Promise<Error> if this instance is being or has been destroyed, else null.\n  private destroyed: Promise<Error> | null = null;\n  /// A promise for the result of an active connection attempt if one is in progress,\n  /// or undefined if we're disconnected and aren't currently tying to conect.\n  private connected: undefined | Promise<void>;\n  /// The number of times we have attempted to connect.\n  private connectionCount: number = 0;\n\n  private device: BluetoothDevice;\n  private server: BluetoothRemoteGATTServer;\n\n  /// Safety: these must only be accessed after we've connected (which initializes them).\n  private service: BluetoothRemoteGATTService = undefined as unsafe;\n  private characteristics: BluetoothRemoteGATTCharacteristic[] = undefined as unsafe;\n  private transmitter: BluetoothRemoteGATTCharacteristic = undefined as unsafe;\n  private receiver: BluetoothRemoteGATTCharacteristic = undefined as unsafe;\n\n  /// Maximum of time to wait for a response before we mark a call as failed.\n  private callTimeout: number = 4000;\n\n  /// Safari doesn't support new EventTarget.\n  private eventTarget: EventTarget = document.createElement(\"teledildonics-EventTarget\");\n\n  public constructor(device: BluetoothDevice) {\n    this.device = device;\n    this.server = unwrap(device.gatt, \"Bluetooth device did not support GATT\");\n\n    this.connected = undefined;\n  }\n\n  deviceName() {\n    return this.device.name || this.device.id;\n  }\n\n  private logPrefix(): string {\n    return `${this.deviceName()\n      .slice(0, 10)\n      .padStart(10)}:`;\n  }\n\n  public addEventListener(type: EventType, listener: (event: unknown) => void): unknown {\n    return this.eventTarget.addEventListener(type, listener);\n  }\n\n  public removeEventListener(type: EventType, listener: (event: unknown) => void): unknown {\n    return this.removeEventListener(type, listener);\n  }\n\n  /// Connects to the device if not already connected.\n  public async connect(): Promise<void> {\n    if (this.destroyed) {\n      throw await this.destroyed;\n    }\n\n    if (this.connected) {\n      return this.connected;\n    }\n\n    console.info(this.logPrefix(), \"Connecting.\");\n\n    this.connectionCount += 1;\n    this.connected = addTimeout(\n      (async () => {\n        await this.server.connect();\n\n        if (this.destroyed) {\n          throw await this.destroyed;\n        }\n\n        const onMessage = (event: { target: { value: DataView } }) => {\n          assert(event && event.target && event.target.value instanceof DataView);\n          const binary: DataView = event.target.value;\n\n          const s = utf8.decode(binary);\n          console.info(\n            `${this.logPrefix()} got  %c${s}`,\n            \"color: #131; font-weight: bold; border: 1px solid #131; padding: 2px 6px; background: #EEE;\"\n          );\n        };\n\n        const onDisconnected = () => {\n          console.info(this.logPrefix(), \"Disconnected.\");\n          this.connected = undefined;\n          this.device.removeEventListener(\"gattserverdisconnected\", onDisconnected);\n          if (this.receiver) {\n            this.receiver.removeEventListener(\n              \"characteristicvaluechanged\",\n              onMessage as unsafe\n            );\n          }\n          this.eventTarget.dispatchEvent(new Event(\"disconnect\"));\n        };\n\n        this.device.addEventListener(\"gattserverdisconnected\", onDisconnected);\n\n        this.service = only(await this.server.getPrimaryServices());\n        this.characteristics = await this.service.getCharacteristics();\n        this.transmitter = only(this.characteristics.filter(c => c.properties.write));\n        this.receiver = only(this.characteristics.filter(c => !c.properties.write));\n\n        this.receiver.addEventListener(\"characteristicvaluechanged\", onMessage as unsafe);\n\n        await this.receiver.startNotifications();\n\n        this.eventTarget.dispatchEvent(new Event(\"connect\"));\n\n        if (this.destroyed) {\n          throw await this.destroyed;\n        }\n      })(),\n      6000,\n      new Error(\"Initial connection to Lovense timed out\")\n    );\n\n    this.connected.catch(() => {\n      this.connected = undefined;\n    });\n\n    return this.connected;\n  }\n\n  /// Disconnects from the device if connected.\n  public async disconnect(): Promise<void> {\n    if (this.connected) {\n      try {\n        await this.connected;\n      } catch (error) {\n        return;\n      }\n    }\n\n    console.info(this.logPrefix(), \"Disconnecting\");\n\n    await this.server.disconnect();\n  }\n\n  /// Runs a callback after ensure we're connected, and retries if it throws\n  /// an error but the connection was lost.\n  private async connectAndRetry<T>(f: () => T): Promise<T> {\n    while (true) {\n      while (true) {\n        if (this.destroyed) {\n          throw await this.destroyed;\n        }\n\n        try {\n          await this.connect();\n          break;\n        } catch (error) {\n          console.error(this.logPrefix(), \"Failed to connect\", error);\n          await sleep(500);\n          continue;\n        }\n      }\n\n      const connectionCount = this.connectionCount;\n      try {\n        return f();\n      } catch (error) {\n        if (this.connected === undefined || this.connectionCount > connectionCount) {\n          console.warn(\n            this.logPrefix(),\n            \"disconnected then\",\n            error,\n            \"was thrown. Retrying in 1s.\"\n          );\n          await sleep(500);\n          await this.connect();\n          continue;\n        } else {\n          console.error(\n            this.logPrefix(),\n            \"didn't disconnnect but command still failed. Retrying in 10s.\",\n            error\n          );\n          await sleep(10000);\n          continue;\n        }\n      }\n    }\n  }\n\n  /// Cleans up all resources assocaited with this instance, disconnects, and makes it unusable.\n  public async destroy(error: Error = new Error(\"Lovense::destroy()ed\")): Promise<Error> {\n    if (!this.destroyed) {\n      this.destroyed = (async () => {\n        try {\n          // Let any commands that are already called complete, but destroy the rest.\n          try {\n            await this.lock.use(async () => {\n              throw new Error(\"Lovense instance destroyed\");\n            });\n          } catch (_) {}\n\n          await this.disconnect();\n\n          this.device = null as unsafe;\n          this.server = null as unsafe;\n          this.transmitter = null as unsafe;\n          this.receiver = null as unsafe;\n        } finally {\n          return error;\n        }\n      })();\n    }\n    return this.destroyed;\n  }\n\n  public async call<Result>(\n    request: string,\n    handler: (responses: ReadableStreamReader<string>) => Promise<Result>,\n    timeout: number | undefined = this.callTimeout\n  ): Promise<Result> {\n    if (this.destroyed) {\n      throw await this.destroyed;\n    }\n\n    if (handler === undefined) {\n      // Only for convenience during debugging, since the static type signature requires a handler.\n      console.warn(this.logPrefix(), \"call() handler was null\");\n      handler = (async () => {}) as unsafe;\n    }\n\n    return this.lock.use(async () =>\n      this.connectAndRetry(() => {\n        let result = withEventStream(\n          this.receiver,\n          \"characteristicvaluechanged\",\n          (event: unsafe) => {\n            assert(event && event.target && event.target.value instanceof DataView);\n            const binary: DataView = event.target.value;\n            return utf8.decode(binary);\n          },\n          async responses => {\n            console.info(\n              `${this.logPrefix()} sent %c${request}`,\n              \"color: purple; font-weight: bold; border: 1px solid purple; padding: 2px 6px; background: #EEE;\"\n            );\n            await this.transmitter.writeValue(utf8.encode(request));\n            return await handler(responses);\n          }\n        );\n\n        if (timeout !== undefined) {\n          result = addTimeout(result, timeout);\n        }\n\n        return result;\n      })\n    );\n  }\n\n  /// The DeviceType response never changes, so we can cache it as soon as we have it.\n  private cachedInfo: undefined | LovenseDeviceInfo = undefined;\n\n  /// Returns information about the device\n  public async info(): Promise<LovenseDeviceInfo> {\n    if (this.cachedInfo) {\n      return this.cachedInfo;\n    }\n\n    return this.call(\"DeviceType;\", async responses => {\n      const { value } = await responses.read();\n      const [id, firmware, serial] = value.slice(0, -1).split(\":\");\n      const model = unwrap(modelsById.get(id));\n      const capabilities = unwrap(modelCapabilities.get(model));\n      this.cachedInfo = {\n        id,\n        model,\n        firmware: Number(firmware),\n        capabilities,\n        serial\n      };\n      return this.cachedInfo;\n    });\n  }\n\n  /// Returns the battery level as a value between 0.0 and 1.0.\n  public async battery(): Promise<number> {\n    const value = await this.call(\"Battery;\", async responses => {\n      const { value } = await responses.read();\n      return value;\n    });\n\n    let body = unwrap(first(value.split(\";\")));\n\n    if (body[0] === \"s\") {\n      console.warn(\n        this.logPrefix(),\n        \"Got `s` prefix in battery value. Not sure why this happens.\"\n      );\n      // This seems to be what happens if you request the battery level while it's currently vibrating.\n      // Maybe it's the way you check if it's active, so you know if you need to stop it?\n      body = body.slice(1);\n    }\n\n    const level = Number(body);\n\n    if (!(Number.isSafeInteger(level) && 0 <= level && level <= 100)) {\n      throw new Error(\"Battery should be integer from 0-100.\");\n    }\n\n    return level / 100.0;\n  }\n\n  /// Returns the production batch date of this device.\n  public async batch(): Promise<number> {\n    return this.call(\"GetBatch;\", async responses => {\n      const { value } = await responses.read();\n      return Number(unwrap(first(value.split(/[;,]/))));\n    });\n  }\n\n  /// Set the vibration level to a value between 0.0 and 1.0.\n  public async vibrate(power: number): Promise<void> {\n    if (!(0 <= power && power <= 1.0)) {\n      throw new Error(\"Power must be from 0.0-1.0.\");\n    }\n\n    const level = Math.round(power * 20.0);\n\n    if (!(Number.isSafeInteger(level) && 0 <= level && level <= 20)) {\n      throw new Error(\"Level must be integer from 0-20.\");\n    }\n\n    return this.call(`Vibrate:${level};`, async responses => {\n      const { value } = await responses.read();\n      assert(value === \"OK;\", \"Unexpected response to Vibrate command.\");\n    });\n  }\n\n  /// Set the rotation level to a value between -1.0 (anticlockwise) and +1.0 (clockwise).\n  public async rotate(power: number): Promise<void> {\n    if (!(-1.0 <= power && power <= 1.0)) {\n      throw new Error(\"Power must be from -1.0 to +1.0.\");\n    }\n\n    let command;\n    if (power > 0) {\n      command = \"Rotate:True\";\n    } else if (power < 0) {\n      command = \"Rotate:False\";\n    } else {\n      command = \"Rotate\";\n    }\n\n    const level = Math.round(Math.abs(power * 20.0));\n\n    if (!(Number.isSafeInteger(level) && 0 <= level && level <= 20)) {\n      throw new Error(\"Level must be integer from 0-20.\");\n    }\n\n    return this.call(`${command}:${level};`, async responses => {\n      const { value } = await responses.read();\n      assert(value === \"OK;\", \"Unexpected response to Rotate command.\");\n    });\n  }\n\n  /// Return a pattern currently set on the device.\n  ///\n  /// The result is an array of values between 0.0 and 1.0, each indicating the\n  /// target power level for half of a second.\n  private async getPattern(index: number): Promise<Array<number>> {\n    return this.call(\n      `GetPatten:${index};`,\n      async responses => {\n        const powers = [];\n        while (true) {\n          const { value } = await responses.read();\n          if (value === \"ER;\") {\n            throw new Error(\"Got Error response from device.\");\n          }\n          assert(\n            /^P[0-9]:[0-9]{1,2}\\/[0-9]{1,2}:[0-9]+;$/.test(value),\n            \"Unexpected response to GetPatten:#\"\n          );\n          const body = unwrap(first(value.split(\";\")));\n          const [tag, part, levels] = body.split(/:/g);\n          assert(tag === `P${index}`, \"Got pattern response for wrong index!\");\n          const [partIndex, partCount] = part.split(\"/\");\n          powers.push(...[...levels].map(digit => Number(digit) / 9.0));\n          if (partIndex === partCount) {\n            break;\n          }\n        }\n        return powers;\n      },\n      this.callTimeout * 10\n    );\n  }\n\n  /// Return all patterns currently set on the device.\n  ///\n  /// The result is an array of arrays of values between 0.0 and 1.0,\n  /// each indicating the target power level for half of a second.\n  public async patterns(): Promise<Array<Array<number>>> {\n    const response = await this.call(`GetPatten;`, async responses => {\n      const { value } = await responses.read();\n      return value;\n    });\n    assert(/^P:0?1?2?3?4?5?6?7?8?9?;$/.test(response), \"Unexpected response to GetPatten\");\n    const indices = unwrap(first(response.slice(2).split(\";\")));\n    const patterns = [];\n    for (const index of indices) {\n      patterns.push(await this.getPattern(Number(index)));\n    }\n    return patterns;\n  }\n\n  /// Starts running a programmed pattern on loop.\n  ///\n  ///\n  public async startPattern(index: number): Promise<void> {\n    return this.call(`Preset:${index};`, async responses => {\n      const { value } = await responses.read();\n      assert(value === \"OK;\", \"Unexpected response to preset command.\");\n    });\n  }\n\n  /// Stops all activity on the device.\n  public async stop(): Promise<void> {\n    const { capabilities } = await this.info();\n    if (capabilities.vibration) {\n      await this.vibrate(0);\n    }\n    if (capabilities.rotation) {\n      await this.rotate(0);\n    }\n  }\n}\n\n/// The information we get or derive from the DeviceType call.\nexport type LovenseDeviceInfo = {\n  id: string;\n  model: Model;\n  capabilities: DeviceCapabilities;\n  firmware: number;\n  serial: string;\n};\n\n/// WebBluetooth device profile covering all Lovense devices and services.\nexport const deviceProfile = {\n  filters: [{ namePrefix: \"LVS-\" }],\n  optionalServices: [\n    \"0000fff0-0000-1000-8000-00805f9b34fb\",\n    \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\",\n    ...[...\"45\"]\n      .map(a =>\n        [...\"0123456789abcdef\"].map(b =>\n          [...\"34\"].map(c => `${a}${b}300001-002${c}-4bd4-bbd5-a6920e4c5653`)\n        )\n      )\n      .flat(3)\n  ]\n};\n","import { useState, useEffect, useRef } from \"react\";\nimport { sleep } from \"../common/async\";\n\nexport const useThrottledChanges = <T extends unknown>(interval: number, value: T) => {\n  /// Whether this value is currently throttled, meaning that the value has\n  /// changed within the last interval ms. If throttled == true, there will be\n  /// an async function, which will set throttled to false once the interval has\n  /// elapsed, and check if the target value has changed and needs to be updated,\n  /// which would reset the throttle.\n  const throttled = useRef<boolean>(false);\n\n  /// The throttled value we are outputting.\n  const [throttledValue, setThrottledValue] = useState<T>(value);\n\n  /// A shared state storing the latest input value, which may not yet be\n  /// reflected to the output throttledValue if we're throttled.\n  const targetValue = useRef<T>(value);\n\n  useEffect(() => {\n    targetValue.current = value;\n\n    if (!throttled.current) {\n      throttled.current = true;\n      setThrottledValue(value);\n\n      const checkAsync = async (initialValue: T) => {\n        await sleep(interval);\n\n        const latestTargetValue = targetValue.current;\n        if (initialValue !== latestTargetValue) {\n          setThrottledValue(latestTargetValue);\n          checkAsync(latestTargetValue);\n        } else {\n          throttled.current = false;\n        }\n      };\n\n      checkAsync(value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  return throttledValue;\n};\n","import { FC } from \"react\";\nimport React from \"react\";\nimport Lovense from \"../lovense/lovense\";\n\nexport const PatternsControl: FC<{ lovense: Lovense; patterns: Array<Array<number>> }> = ({\n  lovense,\n  patterns\n}) => {\n  return (\n    <div style={{}}>\n      {patterns.map((pattern, index) => (\n        <div\n          key={index.toString()}\n          style={{\n            cursor: \"pointer\",\n            margin: \"8px\",\n            background: \"#FFF\",\n            border: \"1px solid #000\",\n            color: \"black\",\n            textAlign: \"center\",\n            fontSize: \"0.75em\",\n            wordWrap: \"break-word\",\n            width: \"325px\",\n            fontFamily: \"monospace\"\n          }}\n          onClick={() => lovense.startPattern(index + 1)}\n        >\n          {pattern.map((value, index) => (\n            <span\n              key={index.toString()}\n              style={{\n                opacity: 0.125 + (1 - 0.125) * value,\n                color: \"#000\",\n                background: \"#888\"\n              }}\n            >\n              {Math.round(value * 9)}\n            </span>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport React from \"react\";\nimport { unwrap, assert } from \"../common/safety\";\n\nconst outerHeight = 300;\nconst innerHeight = 2.0;\nconst outerWidth = 900;\nconst innerWidth = 90.0;\nconst xScale = outerWidth / innerWidth;\nconst yOffset = 0.5 + outerHeight / 2;\nconst yScale = outerHeight / innerHeight;\n\nexport const PatternDisplay: FC<{\n  pattern: (x: number) => number;\n  x: number;\n  height?: number;\n}> = ({ pattern, x, height = 100 }) => {\n  const y = pattern(x);\n\n  const xOffset = 0.5 - Math.max(0, x * xScale - 25 * Math.log(x) - outerWidth / 4 + 100);\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = outerWidth;\n  canvas.height = outerHeight;\n  const g2d = unwrap(canvas.getContext(\"2d\") || undefined);\n\n  g2d.lineJoin = \"round\";\n\n  // minor y ticks every 25% power\n  g2d.beginPath();\n  g2d.strokeStyle = \"#EEE\";\n  g2d.lineWidth = 3;\n  for (let dy = -yOffset; dy <= outerHeight; dy += 0.25 * yScale) {\n    g2d.moveTo(0, outerHeight - (yOffset + dy));\n    g2d.lineTo(outerWidth, outerHeight - (yOffset + dy));\n  }\n  g2d.stroke();\n  // minor x ticks every 2 seconds\n  g2d.beginPath();\n  g2d.strokeStyle = \"#EEE\";\n  g2d.lineWidth = 3;\n  for (let dx = 0; dx <= outerWidth * 8; dx += 1.0 * xScale) {\n    g2d.moveTo(xOffset + dx, outerHeight);\n    g2d.lineTo(xOffset + dx, outerHeight - outerHeight);\n  }\n  g2d.stroke();\n\n  // major y ticks every 100% power\n  g2d.beginPath();\n  g2d.strokeStyle = \"#AAA\";\n  g2d.lineWidth = 7;\n  for (let dy = -yOffset; dy <= outerHeight; dy += 1.0 * yScale) {\n    g2d.moveTo(0, outerHeight - (yOffset + dy));\n    g2d.lineTo(outerWidth, outerHeight - (yOffset + dy));\n  }\n  g2d.stroke();\n\n  // major x ticks every 10 seconds\n  g2d.beginPath();\n  g2d.strokeStyle = \"#AAA\";\n  g2d.lineWidth = 7;\n  for (let dx = 0; dx <= outerWidth * 8; dx += 10 * xScale) {\n    g2d.moveTo(xOffset + dx, 0);\n    g2d.lineTo(xOffset + dx, outerHeight);\n  }\n  g2d.stroke();\n\n  // draw a crosshair pointing at the current coordinate\n  g2d.beginPath();\n  g2d.strokeStyle = \"#F88\";\n  g2d.lineWidth = 5;\n  g2d.moveTo(xOffset + x * xScale, outerHeight);\n  g2d.lineTo(xOffset + x * xScale, 0);\n  g2d.moveTo(0 * xScale, outerHeight - (yOffset + y * yScale));\n  g2d.lineTo(outerWidth, outerHeight - (yOffset + y * yScale));\n  g2d.stroke();\n\n  // graph entire thing\n  g2d.beginPath();\n  g2d.strokeStyle = \"#000\";\n  g2d.lineWidth = 3;\n  g2d.moveTo(xOffset, yOffset);\n  for (let x = 0; x <= outerWidth * 8; x++) {\n    const y = pattern(x / xScale) * yScale;\n    g2d.lineTo(xOffset + x, outerHeight - (yOffset + y));\n  }\n  g2d.stroke();\n\n  // circle current value\n  g2d.beginPath();\n  g2d.strokeStyle = \"#B00\";\n  g2d.lineWidth = 9;\n  g2d.arc(xOffset + x * xScale, outerHeight - (yOffset + y * yScale), 20, 0, 2 * Math.PI);\n  g2d.stroke();\n\n  const url = canvas.toDataURL();\n  return <img alt=\"pattern graph\" src={url} height={height} />;\n};\n\nexport const clamp = (x: number, min: number = 0.0, max: number = 1.0) => {\n  assert(min < max);\n  return Math.min(max, Math.max(min, x));\n};\n\nexport const sinny = (x: number, period: number = 1.0, magnitude: number = 1.0) => {\n  return magnitude * (0.5 + 0.5 * Math.sin((x / period) * 2 * Math.PI - Math.PI / 2));\n};\n\nexport const compound = (a: number, b: number) => {\n  return 1.0 - (1.0 - clamp(a)) * (1.0 - clamp(b));\n};\n\nexport const compress = (a: number, b: number) => {\n  return clamp(a) * clamp(b);\n};\n\nexport const blend = (...numbers: Array<number>) => {\n  let sum = 0;\n  for (const n of numbers) {\n    sum += n;\n  }\n  return sum / numbers.length;\n};\n\nexport const thor = (x: number) => {\n  x = x / 3;\n  const xAccelerating = Math.pow(x - sinny(x, 10), 1.5);\n  const baseline = blend(sinny(x, 10), sinny(x, 3));\n  const longStrongRamp = Math.pow(clamp(x / 120), 2);\n  const initialClamp = clamp(x / 15);\n  return compound(\n    longStrongRamp,\n    compress(\n      Math.pow(0.25 + 0.75 * sinny(x, 4), 0.5),\n      compress(initialClamp, blend(baseline, sinny(xAccelerating, 10)))\n    )\n  );\n};\n","import React, { useState, FC, useEffect, useCallback } from \"react\";\nimport { useLovense } from \"../hooks/lovense\";\nimport { useThrottledChanges } from \"../hooks/throttle\";\nimport { LovenseDeviceInfo } from \"../lovense/lovense\";\nimport { PatternsControl } from \"./patterns\";\nimport { PatternDisplay, thor } from \"../lovense/patterns\";\nimport { useLovenseDebug } from \"../hooks/lovense-debug\";\n\nexport const DeviceControl: FC<{ device: BluetoothDevice }> = ({ device }) => {\n  const [targetVibrationLevel, setTargetVibrationLevel] = useState(0);\n  const targetVibrationPower = targetVibrationLevel / 20.0;\n  const throttledTargetVibrationPower = useThrottledChanges(500, targetVibrationPower);\n\n  const [targetRotationLevel, setTargetRotationLevel] = useState(0);\n  const targetRotationPower = targetRotationLevel / 20.0;\n  const throttledTargetRotationPower = useThrottledChanges(500, targetRotationPower);\n\n  const [info, setInfo] = useState<LovenseDeviceInfo>();\n  const [batch, setBatch] = useState<number>();\n  const [battery, setBattery] = useState<number>();\n  const [patterns, setPatterns] = useState<Array<Array<number>>>();\n\n  const lovense = useLovense(\n    device,\n    undefined,\n    useCallback(() => {\n      // If we disconnect, set everything to zero to make sure we are in a consistent\n      // state with the toy when it reconnects.\n      setTargetVibrationLevel(0);\n      setTargetRotationLevel(0);\n    }, [])\n  );\n\n  useLovenseDebug(lovense);\n\n  /// Fetch device info once it's available.\n  useEffect(() => {\n    if (!lovense) {\n      return;\n    }\n\n    const info = lovense.info();\n    info.then(info => {\n      if (!lovense) {\n        return;\n      }\n\n      setInfo(info);\n\n      if (info.capabilities.patterns) {\n        lovense.patterns().then(setPatterns);\n      }\n    });\n    lovense.batch().then(setBatch);\n    lovense.battery().then(setBattery);\n\n    let batteryPollInterval = setInterval(() => {\n      if (!lovense) {\n        return;\n      }\n\n      lovense.battery().then(setBattery);\n    }, 60 * 1000);\n\n    return () => {\n      clearInterval(batteryPollInterval);\n    };\n  }, [lovense]);\n\n  /// Set device vibration power when it changes.\n  useEffect(() => {\n    if (!(lovense && info)) {\n      return;\n    }\n\n    if (!info.capabilities.vibration) {\n      return;\n    }\n\n    lovense.vibrate(throttledTargetVibrationPower);\n  }, [lovense, info, throttledTargetVibrationPower]);\n\n  /// Set device rotation power and direction when it changes.\n  useEffect(() => {\n    if (!(lovense && info)) {\n      return;\n    }\n\n    if (!info.capabilities.rotation) {\n      return;\n    }\n\n    lovense.rotate(throttledTargetRotationPower);\n  }, [lovense, info, throttledTargetRotationPower]);\n\n  const [pattern] = useState(() => thor);\n  const [patternEnabled, setPatternEnabled] = useState();\n  const [t, setT] = useState(0.0);\n  useEffect(() => {\n    if (!(info && patternEnabled)) {\n      return;\n    }\n\n    const startTime = Date.now();\n\n    const intervalId = setInterval(() => {\n      const t = (Date.now() - startTime) / 1000;\n      setT(t);\n      const x = pattern(t);\n      setTargetVibrationLevel(x * 20);\n      setTargetRotationLevel(x * 20);\n    }, 1000 / 60);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [info, pattern, patternEnabled]);\n\n  if (!lovense) {\n    return (\n      <>\n        {\" \"}\n        <div\n          style={{\n            boxSizing: \"border-box\",\n            border: \"1px solid black\",\n            color: \"#000\",\n            background: \"#F8D8C8\",\n            minHeight: \"40px\",\n            width: \"128px\",\n            fontSize: \"14px\",\n            fontFamily: \"sans-serif\",\n            padding: \"4px\",\n            display: \"inline-flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            cursor: \"default\",\n            borderRadius: \"4px\",\n            borderTopLeftRadius: 0,\n            verticalAlign: \"top\"\n          }}\n        >\n          connecting...\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {\" \"}\n      <div\n        style={{\n          display: \"inline-flex\",\n          boxSizing: \"border-box\",\n          border: \"1px solid black\",\n          color: \"#000\",\n          background: \"#F8F8F8\",\n          minHeight: \"40px\",\n          width: \"350px\",\n          fontSize: \"14px\",\n          fontFamily: \"sans-serif\",\n          padding: \"4px\",\n          alignItems: \"center\",\n          justifyContent: \"start\",\n          flexDirection: \"column\",\n          cursor: \"default\",\n          borderRadius: \"4px\",\n          verticalAlign: \"top\"\n        }}\n      >\n        <div\n          style={{\n            marginBottom: \"8px\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"start\",\n            alignItems: \"center\"\n          }}\n        >\n          <span\n            style={{\n              fontSize: \"30px\",\n              fontWeight: \"bold\",\n              fontFamily: \"Trebuchet MS\"\n            }}\n          >\n            {info ? info.model : device.name}\n          </span>\n          {info && batch && (\n            <div\n              style={{\n                margin: \"0 12px\",\n                textAlign: \"center\",\n                display: \"inline-block\",\n                fontSize: \"12px\",\n                fontWeight: \"normal\",\n                lineHeight: \"10px\"\n              }}\n            >\n              {batch}\n              {info.serial} <br />\n              running firmware {info.firmware}\n            </div>\n          )}\n          {battery != null && (\n            <div\n              onClick={() => lovense.battery().then(setBattery)}\n              style={{ cursor: \"pointer\" }}\n            >\n              {Math.floor(battery * 100)}%\n              <span role=\"img\" aria-label=\"Battery\">\n                🔋\n              </span>\n            </div>\n          )}\n        </div>\n        {lovense && (\n          <>\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                width: \"100%\",\n                justifyContent: \"flex-end\",\n                flexDirection: \"row\",\n                height: \"56px\"\n              }}\n            >\n              <span\n                role=\"img\"\n                aria-label=\"Stop\"\n                style={{\n                  fontSize: \"3em\",\n                  cursor: \"pointer\"\n                }}\n                onClick={() => {\n                  setTargetRotationLevel(0);\n                  setTargetVibrationLevel(0);\n                  lovense.stop();\n                }}\n              >\n                🛑\n              </span>\n\n              <code\n                style={{\n                  verticalAlign: \"top\",\n                  margin: \"4px\",\n                  fontSize: \"16px\",\n                  whiteSpace: \"pre\",\n                  fontFamily: \"consolas, monospace\"\n                }}\n              >\n                {Math.floor(targetVibrationPower * 100)\n                  .toString()\n                  .padStart(3)}\n                %\n              </code>\n\n              <input\n                value={targetVibrationLevel}\n                min=\"0\"\n                max=\"20\"\n                type=\"range\"\n                onChange={event => {\n                  const level = Number(event.target.value);\n                  setTargetVibrationLevel(level);\n                }}\n                style={{\n                  cursor: \"pointer\",\n                  width: \"225px\",\n                  transform: \"scaleY(2.0)\"\n                }}\n              />\n            </div>\n            {info && info.capabilities.rotation && (\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  width: \"100%\",\n                  justifyContent: \"flex-end\",\n                  flexDirection: \"row\",\n                  height: \"56px\"\n                }}\n              >\n                <span>rotation:</span>\n                <code\n                  style={{\n                    verticalAlign: \"top\",\n                    margin: \"4px\",\n                    fontSize: \"16px\",\n                    whiteSpace: \"pre\",\n                    fontFamily: \"consolas, monospace\"\n                  }}\n                >\n                  {Math.floor(targetRotationPower * 100)\n                    .toString()\n                    .padStart(3)}\n                  %\n                </code>\n\n                <input\n                  value={targetRotationLevel}\n                  min=\"-20\"\n                  max=\"20\"\n                  type=\"range\"\n                  onChange={event => {\n                    const level = Number(event.target.value);\n                    setTargetRotationLevel(level);\n                  }}\n                  style={{\n                    cursor: \"pointer\",\n                    width: \"225px\",\n                    transform: \"scaleY(2.0)\"\n                  }}\n                />\n              </div>\n            )}\n            {info && info.capabilities.patterns && patterns && (\n              <PatternsControl\n                lovense={lovense}\n                patterns={patterns.slice(0, info.capabilities.patterns)}\n              />\n            )}\n            {info && pattern && (\n              <>\n                <PatternDisplay pattern={pattern} x={t} height={100} />\n                <button onClick={() => setPatternEnabled(!patternEnabled)}>run</button>\n              </>\n            )}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import Lovense from \"../lovense/lovense\";\nimport { useState, useEffect } from \"react\";\n\nexport const useLovense = (\n  device: BluetoothDevice,\n  onConnect?: (_: Lovense) => void,\n  onDisconnect?: (_: Lovense) => void\n): Lovense | null => {\n  const [lovense, setState] = useState();\n\n  useEffect(() => {\n    const lovense = new Lovense(device);\n\n    if (onConnect) {\n      lovense.addEventListener(\"connect\", () => {\n        onConnect(lovense);\n      });\n    }\n\n    if (onDisconnect) {\n      lovense.addEventListener(\"disconnect\", () => {\n        onDisconnect(lovense);\n      });\n    }\n\n    setState(lovense);\n\n    return () => {\n      (async () => {\n        lovense.stop().catch(error => {\n          console.error(\"Error from stop command while cleaning up useLovense():\", error);\n        });\n        await lovense.disconnect();\n        await lovense.destroy();\n      })();\n    };\n  }, [device, onConnect, onDisconnect]);\n\n  return lovense;\n};\n","import { useEffect } from \"react\";\nimport Lovense from \"../lovense/lovense\";\nimport { unsafe } from \"../common/safety\";\n\nexport const useLovenseDebug = (lovense: Lovense | null) => {\n  useEffect(() => {\n    if (!lovense) {\n      return;\n    }\n\n    (window as unsafe).lovense = lovense;\n    (window as unsafe).call = async (command: string) =>\n      lovense.call(command, async responses => {\n        const { value } = await responses.read();\n        return value;\n      });\n    console.info(\n      `%c🌟%c Exported %c${lovense.deviceName()}%c as %cwindow.lovense: Lovense%c, with %cwindow.call: async (command: string) => Promise<void>%c.`,\n      \"font-family: sans-serif; margin-top: 16px; margin-right: 16px;\",\n      \"font-family: sans-serif;\",\n      \"font-family: sans-serif; color: purple;\",\n      \"font-family: sans-serif;\",\n      \"font-weight: bold;\",\n      \"font-family: sans-serif;\",\n      \"font-weight: bold;\",\n      \" \"\n    );\n    console.info(lovense);\n    console.info(\n      \"%c🌟%c You may now %cawait call('DeviceType;')%c.\",\n      \"font-family: sans-serif; margin-bottom: 16px; margin-right: 16px;\",\n      \"font-family: sans-serif;\",\n      \"font-weight: bold;\",\n      \"font-family: sans-serif;\"\n    );\n  }, [lovense]);\n};\n","import React, { useState, FC } from \"react\";\nimport BluetoothSelector from \"./bluetooth-selector\";\nimport { DeviceControl } from \"./lovense-control\";\nimport { deviceProfile } from \"../lovense/lovense\";\nexport const DevicePanes: FC = () => {\n  const [device, setDevice] = useState<BluetoothDevice>();\n\n  return (\n    <>\n      <section\n        style={{\n          margin: \"4px\"\n        }}\n      >\n        <BluetoothSelector\n          options={deviceProfile}\n          onChange={event => setDevice(event.target.value)}\n        ></BluetoothSelector>\n        {device && <DeviceControl device={device}></DeviceControl>}\n      </section>\n\n      {device && <DevicePanes />}\n    </>\n  );\n};\n","import { Resolver } from \"./async\";\nexport class AsyncDisposable {\n  /// An Resolver that will be resolved once dispose() is called.\n  private disposeStarter = new Resolver();\n  protected diposeStarted = this.disposeStarter.readonly();\n\n  /// An Resolver that will be resolved when dispose() is complete.\n  private disposeCompleter = new Resolver();\n  protected diposeCompleted = this.disposeCompleter.readonly();\n\n  /// Throws an error if dispose() has been called.\n  ///\n  /// Subclasses should consider calling this at the beginning of every public-facing method to assert\n  /// that they're never called after dispose() has been called.\n  protected throwIfDisposeStarted() {\n    if (this.diposeStarted.settled) {\n      throw new DisposedError(this, `dispose() already called on ${this}`);\n    }\n  }\n\n  /// Throws an error if dispose() has completed.\n  ///\n  /// Subclasses should consider calling this at the beginning of every method (unless\n  /// throwIfDisposeStarted() is called), and after every await in method bodies.\n  protected throwIfDisposeComplete() {\n    if (this.diposeCompleted.settled) {\n      throw new DisposedError(this, `dispose() already completed on ${this}`);\n    }\n  }\n\n  /// A Promise for the result of a currently-running call to dispose(),\n  /// if one is in progress.\n  private disposal: Promise<void> | undefined;\n\n  protected async dispose() {\n    this.throwIfDisposeStarted();\n\n    this.disposeStarter.resolve();\n\n    if (this.disposal) {\n      return this.disposal;\n    }\n\n    try {\n      await this.onDispose();\n    } finally {\n      this.disposeCompleter.resolve();\n    }\n  }\n\n  /// Dispose of all resources assoicated with this class.\n  ///\n  /// Inteded for subclasses to override if they need extra disposal behaviour.\n  protected async onDispose(): Promise<void> {}\n}\n\n/// Error throw when you attempt to interact with an instance after dispose() was called.\nexport class DisposedError<T> extends Error {\n  constructor(readonly instance: T, message: string = `${instance} already disposed`) {\n    super(message);\n  }\n}\n","import { Lovense } from \"./lovense-abstract\";\n\nimport { Nora } from \"../lovense/models\";\n\nimport { VibrationLevel, RotationLevel } from \"./lovense-abstract\";\n\nimport { sleep } from \"../common/async\";\n\nexport class LovenseFake extends Lovense {\n  protected async info_() {\n    return {\n      model: Nora,\n      id:\n        \"191109\" +\n        performance\n          .now()\n          .toString(16)\n          .slice(6)\n    };\n  }\n\n  public vibration: VibrationLevel = 0;\n  protected async setVibration_(vibration: VibrationLevel) {\n    await sleep(250);\n    this.vibration = vibration;\n    return vibration;\n  }\n\n  public rotation: RotationLevel = 0;\n  protected async setRotation_(rotation: RotationLevel) {\n    await sleep(250);\n    this.rotation = rotation;\n    return rotation;\n  }\n}\n","import { Model, Nora } from \"../lovense/models\";\nimport { AsyncDisposable } from \"../common/disposable\";\n\n/// The information we get or derive from the DeviceType call.\nexport type LovenseDeviceInfo = {\n  /// Which Lovense model is this device?\n  /// This does not specify the generation/revision.\n  model: Model;\n  /// A string ID uniquely identifying this device.\n  /// Includes its production batch date and its Bluetooth MAC address.\n  id: string;\n};\n\n// Supersceded~!\n\nexport abstract class Lovense extends AsyncDisposable {\n  /// Returns metadata about this device. Immutable, so, memoized.\n  async info(): Promise<LovenseDeviceInfo> {\n    if (!this.cachedInfo) {\n      this.cachedInfo = this.info_();\n    }\n\n    return this.cachedInfo;\n  }\n  private cachedInfo: Promise<LovenseDeviceInfo> | undefined;\n  protected abstract async info_(): Promise<LovenseDeviceInfo>;\n\n  /// The device's current vibration level, or undefined if unknown.\n  abstract vibration: VibrationLevel;\n  async setVibration(vibration: VibrationLevel): Promise<VibrationLevel> {\n    this.throwIfDisposeStarted();\n    return this.setVibration_(vibration);\n  }\n  protected abstract async setVibration_(\n    vibration: VibrationLevel\n  ): Promise<VibrationLevel>;\n\n  /// Whether this device is capable of rotation or not.\n  async canRotate() {\n    const { model } = await this.info();\n    return model === Nora;\n  }\n\n  /// The device's current rotation level and direction, or undefined if unknown.\n  ///\n  /// Throws an error if the device does not support rotation.\n  abstract rotation: RotationLevel;\n  async setRotation(rotation: RotationLevel): Promise<RotationLevel> {\n    if (!(await this.canRotate())) {\n      throw new Error(`This device does not support rotation. Try .canRotate().`);\n    }\n\n    this.throwIfDisposeStarted();\n\n    return this.setRotation_(rotation);\n  }\n  protected abstract async setRotation_(rotation: RotationLevel): Promise<RotationLevel>;\n\n  async stop(): Promise<unknown> {\n    this.throwIfDisposeStarted();\n    return Promise.all([this.setVibration_(0), this.setRotation_(0)]);\n  }\n\n  protected async onDispose() {\n    await Promise.all([this.setVibration_(0), this.setRotation_(0)]);\n  }\n}\n\nexport function isRotationLevel(n: number): n is RotationLevel {\n  return Number.isFinite(n) && -20 <= n && n <= +20;\n}\n\n/// A rotation level with direction indicated by sign.\n/// Positive values are clockwise, negative values are anticlockwise.\nexport type RotationLevel =\n  | (-20 | -19 | -18 | -17 | -16 | -15 | -14 | -13 | -12 | -11)\n  | (-10 | -9 | -8 | -7 | -6 | -5 | -4 | -3 | -2 | -1)\n  | (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10)\n  | (11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20);\n\nexport function isVibrationLevel(n: number): n is VibrationLevel {\n  return Number.isFinite(n) && -20 <= n && n <= +20;\n}\n\n/// Vibration levels.\nexport type VibrationLevel =\n  | (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10)\n  | (11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20);\n","import { LovenseFake } from \"./lovense-fake\";\n\n/// Indicates that an operation did not suceed or fail, but was superseded and replaced  by\n/// a subsequent operation which did then suceed.\nexport type superseded = \"superseded\";\nexport const superseded: superseded = \"superseded\";\n\nexport class LovenseDevice extends LovenseFake {\n  private device: BluetoothDevice;\n  constructor(device: BluetoothDevice) {\n    super();\n    this.device = device;\n  }\n}\n","import React, { FC, useState, useEffect } from \"react\";\n\nimport { deviceProfile } from \"../lovense/lovense\";\n\nimport BluetoothSelector, { buttonStyles } from \"../components/bluetooth-selector\";\n\nimport { Lovense, LovenseDeviceInfo } from \"./lovense-abstract\";\nimport { LovenseDevice } from \"./lovense-device\";\nimport { LovenseFake } from \"./lovense-fake\";\n\nexport const LovenseSelector: FC<{\n  onChange: (lovense: Lovense | undefined) => void;\n}> = ({ onChange }) => {\n  const [lovense, setLovense] = useState<Lovense>();\n  const [info, setInfo] = useState<LovenseDeviceInfo>();\n\n  useEffect(() => {\n    if (!lovense) {\n      return lovense;\n    }\n\n    let abortion = new AbortController();\n\n    lovense.info().then(info => {\n      if (abortion.signal.aborted) {\n        return;\n      }\n\n      setInfo(info);\n    });\n\n    return () => {\n      abortion.abort();\n    };\n  }, [lovense]);\n\n  if (!lovense) {\n    return (\n      <div>\n        <br />\n        <br />\n        <BluetoothSelector\n          options={deviceProfile}\n          onChange={event => {\n            setInfo(undefined);\n            const device = event.target.value;\n            if (device) {\n              const lovense = new LovenseDevice(device);\n              setLovense(lovense);\n              onChange(lovense);\n            } else {\n              setLovense(undefined);\n              onChange(lovense);\n            }\n          }}\n        />{\" \"}\n        <button\n          style={{\n            ...buttonStyles,\n            background: \"#FEB\",\n            cursor: \"pointer\",\n            flexDirection: \"column\"\n          }}\n          onClick={_event => {\n            setInfo(undefined);\n            const lovense = new LovenseFake();\n            setLovense(lovense);\n            onChange(lovense);\n          }}\n        >\n          Simulate Device\n          <br />\n          <span style={{ fontSize: \".75em\" }}>(for interface testing)</span>\n        </button>\n      </div>\n    );\n  } else {\n    let description = info ? JSON.stringify(info) : lovense.toString();\n    return <div>selected {description}</div>;\n  }\n};\n","import React, { FC } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { LovenseDevicesPage } from \"./pages/lovense-devices\";\nimport { ScrapPage } from \"./reconcilliation/scrap\";\n\nconst routes: { [_: string]: FC } = {\n  \"/lovense-devices\": LovenseDevicesPage,\n  \"/scrap\": ScrapPage\n};\n\nconst App: FC = () => {\n  const path = document.location.pathname;\n  const Route = routes[path];\n  const Page = Route || Index;\n\n  // sue me\n  document.title = Route ? path.slice(1) : `teledildonics.dev`;\n\n  return (\n    <section style={{ fontFamily: \"garamond\", margin: \"32px\", fontSize: \"24px\" }}>\n      <h1\n        style={{\n          marginBottom: \"24px\"\n        }}\n      >\n        <a href=\"/\">teledildonics.dev</a>/<a href={path}>{path.slice(1)}</a>\n      </h1>\n\n      <Page />\n    </section>\n  );\n};\n\nexport const Index: FC = () => {\n  return (\n    <ul style={{ listStyleType: \"square\" }}>\n      {Object.entries(routes).map(([path, page], index) => (\n        <li key={index} style={{ marginTop: \"16px\", marginLeft: \"1em\" }}>\n          <a href={path}>{path.slice(1)}</a>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { FC } from \"react\";\nimport { DevicePanes } from \"../components/devices\";\n\nexport const LovenseDevicesPage: FC<{}> = () => {\n  return (\n    <main>\n      <div\n        style={{\n          border: \"1px solid black\",\n          color: \"#000\",\n          background: \"#FFF8F0\",\n          fontSize: \"12px\",\n          fontFamily: \"sans-serif\",\n          padding: \"10px\",\n          borderRadius: \"4px\",\n          display: \"inline-block\",\n          margin: \"4px\",\n          float: \"right\",\n          lineHeight: \"18px\"\n        }}\n      >\n        teledildonics.dev: my remote control playground. <br />\n        Buggy, unstable, and unofficial.{\" \"}\n        <a href=\"https://github.com/teledildonics-dev/teledildonics-dev\">\n          View source here\n        </a>\n        .\n        <br />\n        Open your developer console to see more.\n        <br />\n        Only supports some <a href=\"https://www.lovense.com/compare\">Lovense</a> devices.\n      </div>\n\n      <DevicePanes />\n    </main>\n  );\n};\n","import { FC, useState } from \"react\";\nimport React from \"react\";\nimport { LovenseSelector } from \"./lovense-selector\";\nimport { useLovense } from \"./use-lovense\";\nimport { Lovense, VibrationLevel, RotationLevel } from \"./lovense-abstract\";\n\nexport const ScrapPage: FC = () => {\n  const [lovenseInternal, setLovense] = useState<Lovense>();\n  const lovense = useLovense(lovenseInternal);\n\n  let controls;\n  if (lovense) {\n    controls = (\n      <form>\n        <label>\n          Vibration\n          <input\n            type=\"range\"\n            defaultValue=\"0\"\n            min=\"0\"\n            max=\"20\"\n            onChange={event => {\n              lovense.setVibration(Number(event.target.value) as VibrationLevel);\n            }}\n          />\n        </label>\n        <label>\n          Rotation\n          <input\n            type=\"range\"\n            defaultValue=\"0\"\n            min=\"-20\"\n            max=\"20\"\n            onChange={event => {\n              lovense.setRotation(Number(event.target.value) as RotationLevel);\n            }}\n          />\n        </label>\n      </form>\n    );\n  } else {\n    controls = null;\n  }\n\n  return (\n    <main>\n      <LovenseSelector onChange={setLovense} />\n\n      {controls}\n    </main>\n  );\n};\n","import { Model } from \"../lovense/models\";\nimport {\n  VibrationLevel,\n  RotationLevel,\n  Lovense,\n  LovenseDeviceInfo\n} from \"./lovense-abstract\";\nimport { useEffect, useState } from \"react\";\nimport { unsafe } from \"../common/safety\";\n\ntype UseLovense =\n  | undefined\n  | {\n      lovense: Lovense;\n      model: Model;\n      id: string;\n      canRotate: true;\n      stop(): Promise<unknown>;\n      vibration: VibrationLevel;\n      setVibration(level: VibrationLevel): Promise<VibrationLevel>;\n      rotation: RotationLevel;\n      setRotation(rotation: RotationLevel): Promise<RotationLevel>;\n    };\n\nexport const useLovense = (lovense?: Lovense): UseLovense => {\n  const [info, setInfo] = useState<LovenseDeviceInfo>();\n  const [canRotate, setCanRotate] = useState(false);\n\n  useEffect(() => {\n    if (!lovense) {\n      return;\n    }\n\n    Promise.all([lovense.info(), lovense.canRotate()]).then(([info, canRotate]) => {\n      setInfo(info);\n      setCanRotate(canRotate);\n    });\n  }, [lovense]);\n\n  if (!(lovense && info)) {\n    return;\n  }\n\n  return ({\n    lovense,\n    model: info.model,\n    id: info.id,\n    canVibrate: true,\n    canRotate: canRotate\n  } as unsafe) as UseLovense;\n};\n"],"sourceRoot":""}